cmake_minimum_required(VERSION 2.6)
project(SpLLT)
enable_language(Fortran)
enable_language(C)

########################################
# Version number
set(SPLLT_VERSION_MAJOR 1)
set(SPLLT_VERSION_MINOR 0)
set(SPLLT_VERSION_MICRO 0)

# Include our own cmake modules
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/" )

################################################################################
# Options

########################################
# Runtime system

set(RUNTIME "STF" CACHE STRING "Runtime system")
set_property(CACHE RUNTIME PROPERTY STRINGS STF StarPU OMP Parsec)
if(${RUNTIME} MATCHES "STF")
  message(STATUS "Build SEQUENTIAL version of SpLLT")
else()
  message(STATUS "Build SpLLT with ${RUNTIME} runtime system")
endif()

########################################
# Enable GPU
option(USE_GPU "Enable GPU" OFF)
message(STATUS "Enable GPU: " ${USE_GPU})   

########################################
# Enable MPI
option(USE_MPI "Enable MPI" OFF)
message(STATUS "Enable MPI: " ${USE_MPI})

########################################
# Build for KNL
option(USE_KNL "Run on KNL device" OFF)
message(STATUS "Run on KNL device: " ${USE_KNL})

# Test driver
## SpLLT: Cholesky solver
## SpLDLT: LDLT solver
# set(TEST_DRIVER "SpLLT" CACHE STRING "Test driver")
# set_property(CACHE TEST_DRIVER PROPERTY STRINGS SpLLT SpLDLT)
# MESSAGE( STATUS "Test driver:         " ${TEST_DRIVER} )

# MA87 test driver
option(MA87_TEST_DRIVER "Use the ma87 test driver" OFF)
message(STATUS "Use MA87 test driver: " ${MA87_TEST_DRIVER})

################################################################################
# Compiler options

########################################
# Custom compiler flags

# Set C flags
#set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g -O2" )
# set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g -O2 -ffpe-trap=underflow,denormal" )

# Set CXX flags
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -O2" )
# set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -O2 -ffpe-trap=underflow,denormal" )

# Set Fortran flags
#set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -g -O2" )
# set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -g -O2 -ffpe-trap=zero,underflow,denormal")

########################################
# Build type

# Set default build type
set(default_build_type "RelWithDebInfo")

if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS "Using default build type '${default_build_type}' because none was specified")
  set(CMAKE_BUILD_TYPE "${default_build_type}" CACHE
    STRING "Choose the type of build (Debug, Release, MinSizeRel, RelWithDebInfo)" FORCE)
  # Set the possible values of build type for cmake-gui
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
    "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
endif()

set(CMAKE_Fortran_FLAGS_ALL ${CMAKE_Fortran_FLAGS})
set(CMAKE_C_FLAGS_ALL ${CMAKE_C_FLAGS})

if(CMAKE_BUILD_TYPE MATCHES "Debug")
  list(APPEND CMAKE_Fortran_FLAGS_ALL ${CMAKE_Fortran_FLAGS_DEBUG})
  list(APPEND CMAKE_C_FLAGS_ALL ${CMAKE_C_FLAGS_DEBUG})
elseif(CMAKE_BUILD_TYPE MATCHES "Release")
  list(APPEND CMAKE_Fortran_FLAGS_ALL ${CMAKE_Fortran_FLAGS_RELEASE})
  list(APPEND CMAKE_C_FLAGS_ALL ${CMAKE_C_FLAGS_RELEASE})
elseif(CMAKE_BUILD_TYPE MATCHES "MinSizeRel")
  list(APPEND CMAKE_Fortran_FLAGS_ALL ${CMAKE_Fortran_FLAGS_MINSIZEREL})
  list(APPEND CMAKE_C_FLAGS_ALL ${CMAKE_C_FLAGS_MINSIZEREL})
elseif(CMAKE_BUILD_TYPE MATCHES "RelWithDebInfo")  
  list(APPEND CMAKE_Fortran_FLAGS_ALL ${CMAKE_Fortran_FLAGS_RELWITHDEBINFO})
  list(APPEND CMAKE_C_FLAGS_ALL ${CMAKE_C_FLAGS_RELWITHDEBINFO})
endif()

# message( STATUS "Fortran FLAGS: " ${CMAKE_Fortran_FLAGS} )

################################################################################
# Third-party libraries

set(LIBS)

########################################
# SPRAL
set(SPRAL_DIR $ENV{SPRALDIR} CACHE PATH "Location of Spral Library")
include_directories(${SPRAL_DIR})
message(STATUS "SPRAL Directory: " ${SPRAL_DIR})   

########################################
# Runtime system

# add spLLT test driver
if (${RUNTIME} MATCHES "STF")

  # Use STF code
  add_definitions(-DSPLLT_USE_STF)

elseif(${RUNTIME} MATCHES "StarPU")

  # Use nested STF
  option(SPLLT_USE_NESTED_STF "Use nested STF" OFF)

  if (SPLLT_USE_NESTED_STF MATCHES ON)
    # nested STF
    add_definitions(-DSPLLT_USE_NESTED_STF)
  endif()

  # message( STATUS "Nested STF:      " ${SPLLT_USE_NESTED_STF} )

  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fopenmp")
  set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -fopenmp")
  
  ########################################
  # StarPU
  find_package(STARPU)
  if (STARPU_FOUND)
    include_directories( ${STARPU_INCLUDE_DIRS} )
    link_directories( ${STARPU_LIBRARY_DIRS} )
    link_libraries( ${STARPU_LIBRARIES} )
    set(LIBS ${LIBS} ${STARPU_LIBRARIES})
    find_path(STARPU_F_MOD_FOUND fstarpu_mod.f90
              HINTS ${STARPU_INCLUDE_DIRS}
             )
    set(STARPU_F_MOD "${STARPU_F_MOD_FOUND}/fstarpu_mod.f90")
    include_directories(${STARPU_INCLUDE_DIRS}) 
  else()
    message(FATAL_ERROR "StarPU not found!")
  endif(STARPU_FOUND)
  
  # Use StarPU code
  add_definitions(-DSPLLT_USE_STARPU)

  ########################################
  # HWLOC
  set(HWLOC_DIR $ENV{HWLOCDIR} CACHE PATH "Location of HWLOC Library")
  include_directories(${HWLOC_DIR}/include)  
  find_library(HWLOC_LIBRARY hwloc PATHS ${HWLOC_DIR}/lib)
  set(LIBS ${LIBS} ${HWLOC_LIBRARIES})

elseif(${RUNTIME} MATCHES "OMP")

  # TODO find_package omp
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fopenmp")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fopenmp")
  set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -fopenmp")

  # Enable OMP
  add_definitions(-DSPLLT_USE_OMP)

elseif(${RUNTIME} MATCHES "Parsec")

  # Set C flags
  # set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m64 -mcx16" )
  # set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m64 -mcx16" )

  ########################################
  # Parsec
  set(PARSEC_DIR $ENV{PARSEC_DIR} CACHE PATH "Location of Parsec Library")
  set(PARSEC_SRC_DIR $ENV{PARSEC_SRCDIR} CACHE PATH "Location of Parsec sources")
  include_directories(${PARSEC_SRC_DIR})
  include_directories(${PARSEC_SRC_DIR}/parsec)
  include_directories(${PARSEC_SRC_DIR}/parsec/include)
  include_directories(${PARSEC_SRC_DIR}/parsec/include/parsec)
  include_directories(${PARSEC_DIR}/parsec/include)
  include_directories(${PARSEC_DIR}/parsec/mod_files)
  include_directories(${PARSEC_DIR}/data_dist/matrix)

  # message(STATUS "Parsec directory ENV: " $ENV{PARSECDIR})
  message(STATUS "Parsec source directory: " ${PARSEC_SRC_DIR})
  
  ########################################
  # Parsec libraries
  find_library(PARSEC_FORTRAN_LIBRARY
    NAMES parsecf
    PATHS ${PARSEC_DIR}/parsec/fortran)

  find_library(PARSEC_PROFILEF_LIBRARY
    NAMES parsec_profilef 
    PATHS ${PARSEC_DIR}/parsec/fortran)

  find_library(PARSEC_DIST_LIBRARY
    NAMES parsec_distribution
    PATHS ${PARSEC_DIR}/data_dist)

  find_library(PARSEC_DIST_MAT_LIBRARY
    NAMES parsec_distribution_matrix
    PATHS ${PARSEC_DIR}/data_dist/matrix)

  find_library(PARSEC_BASE_LIBRARY
    NAMES parsec-base
    PATHS ${PARSEC_DIR}/parsec)

  find_library(PARSEC_LIB
    NAMES parsec
    PATHS ${PARSEC_DIR}/parsec)

  set (PARSEC_LIBRARIES ${PARSEC_PROFILEF_LIBRARY}
    ${PARSEC_FORTRAN_LIBRARY} ${PARSEC_DIST_MAT_LIBRARY} 
    ${PARSEC_DIST_LIBRARY} ${PARSEC_LIB} ${PARSEC_BASE_LIBRARY})
  set(LIBS ${LIBS} ${PARSEC_LIBRARIES})

  # message(STATUS "Parsec library: ${PARSEC_LIBRARY}")

  # Dague PP
  # set(DAGUEPP_CFLAGS "--noline" CACHE STRING "Additional daguepp precompiling flags" )
  # set(PARSECPP $ENV{DAGUEPP} CACHE PATH "Parsec JDF compiler") 
  # set(daguepp_EXE ${PARSECPP})

  # Find and configure JDF compiler parsec_ptgpp 
  set(PARSEC_PTGPP_CFLAGS "--noline" CACHE STRING "Additional daguepp precompiling flags")
  set(PARSEC_PTGPP $ENV{PARSECPP} CACHE PATH "Parsec JDF compiler") 
  set(parsec_ptgpp_EXE ${PARSEC_PTGPP})
  
  # # message(STATUS "Dague PP: ${daguepp_EXE}")

  # find_package(PARSEC)
  # if (PARSEC_FOUND)
  #   include_directories(${PARSEC_INCLUDE_DIRS})
  #   link_directories(${PARSEC_LIBRARY_DIRS})
  #   link_libraries(${PARSEC_LIBRARIES})
  #   # Adds directory containing module files
  #   include_directories(${PARSEC_LIBRARY_DIRS}/mod_files)
  #   message("Parsec inc dirs ${PARSEC_INCLUDE_DIRS}")
  #   message("Parsec lib dirs ${PARSEC_LIBRARY_DIRS}")
  #   set(LIBS ${LIBS} ${PARSEC_LIBRARIES})
  #   # Adds JDF compiler and flags
  #   set(PARSEC_PTGPP_CFLAGS "--noline" CACHE STRING "Additional ptgpp precompiling flags")
  #   set(parsec_ptgpp_EXE ${PARSEC_PARSEC_PTGPP})
  # else()
  #   message(FATAL_ERROR "PARSEC not found!")
  # endif(PARSEC_FOUND)

  ########################################
  # HWLOC
  set(HWLOC_DIR $ENV{HWLOCDIR} CACHE PATH "Location of HWLOC Library")
  include_directories(${HWLOC_DIR}/include)  
  find_library(HWLOC_LIBRARY hwloc PATHS ${HWLOC_DIR}/lib)
  set(LIBS ${LIBS} ${HWLOC_LIBRARIES})

  ########################################
  # PAPI
  find_library(PAPI_LIBRARY papi)
  # message(STATUS "PAPI: " ${PAPI_LIBRARY})
  set(LIBS ${LIBS} ${PAPI_LIBRARY})

  # Enable Parsec
  add_definitions(-DSPLLT_USE_PARSEC)

endif()

if(${USE_GPU} MATCHES ON)

  # Use GPU
  add_definitions(-DSPLLT_USE_GPU)

  # set(CUDA_NVCC_FLAGS "-g -arch=compute_20 -code=compute_20,sm_20,sm_35" CACHE
  #   STRING "NVCC flags")

  ########################################
  # CUDA
  find_package(CUDA REQUIRED)

  # set(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS};-g;-arch=compute_20,code=compute_20,sm_20,sm_35")
  # set(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS};-g;-arch=compute_20;-code=compute_20,sm_20,sm_35" CACHE STRING "NVCC flags")

  # set(CUDA_NVCC_FLAGS "TET" CACHE STRING "NVCC flags")
  list(APPEND CUDA_NVCC_FLAGS "-g")
  
  MESSAGE( STATUS "CUDA found:         " ${CUDA_FOUND} )
  MESSAGE( STATUS "CUDA host compiler: " ${CUDA_HOST_COMPILER} )
  MESSAGE( STATUS "CUDA nvcc compiler: " ${CUDA_NVCC_EXECUTABLE})
  MESSAGE( STATUS "NVCC FLAGS:         " ${CUDA_NVCC_FLAGS} )

  # enable_language(CUDA)
  # include(FindCUDA)

  # Allow for dynamic parallelism with CUBLAS
  # set(CUDA_SEPARABLE_COMPILATION TRUE)

  # MAGMA library
  set(MAGMA_DIR $ENV{MAGMADIR} CACHE PATH "Location of MAGMA Library")
  set(MAGMA_SRCDIR $ENV{MAGMASRCDIR} CACHE PATH "Location of MAGMA Sources")
  include_directories(${MAGMA_DIR}/include)
  include_directories(${MAGMA_SRCDIR}/control)     
  find_library(MAGMA_LIBRARIES magma PATHS ${MAGMA_DIR}/lib)

  set(LIBS ${LIBS} ${MAGMA_LIBRARIES})

  set(LIBS ${LIBS} spllt_cuda)

endif()

########################################
# MPI
if(${USE_MPI} MATCHES ON)

  # Use GPU
  add_definitions(-DSPLLT_USE_MPI)

  set(MPI_DIR $ENV{MPIDIR} CACHE PATH "Location of MPI Library")

  include_directories(${MPI_DIR}/include)
  find_library(MPI_LIBRARY mpi PATHS ${MPI_DIR}/lib)

  set(LIBS ${LIBS} ${PAPI_LIBRARY})

endif()


# Set flags for the MA87 test driver

if(MA87_TEST_DRIVER MATCHES ON)
  # TODO find_package omp
  set(CMAKE_C_FLAGS "${CMAKE_CXX_FLAGS} -fopenmp")
  set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -fopenmp")
endif()

########################################
# SpLLT
set(LIBS ${LIBS} spllt)

########################################
# spral
find_library(SPRAL_LIBRARIES spral PATHS ${SPRAL_DIR})
set(LIBS ${LIBS} ${SPRAL_LIBRARIES})

########################################
# Metis
set(METIS_DIR $ENV{METISDIR} CACHE PATH "Location of Metis Library")
find_library(METIS_LIBRARIES metis PATHS ${METIS_DIR})
set(LIBS ${LIBS} ${METIS_LIBRARIES})

########################################
# HWLOC
set(HWLOC_DIR $ENV{HWLOCDIR} CACHE PATH "Location of HWLOC Library")
include_directories(${HWLOC_DIR}/include)  
find_library(HWLOC_LIBRARIES hwloc PATHS ${HWLOC_DIR}/lib)
set(LIBS ${LIBS} ${HWLOC_LIBRARIES})

########################################
# if (${BLAS_LAPACK} MATCHES "MKL")

#   # MKL library

#   if(${USE_KNL} MATCHES ON)

#     find_library(MKL_IFACE_LIBRARY mkl_intel_lp64 PATHS ${MKL_LIBS} ${MKL_DIR}/lib/intel64)
#     find_library(MKL_THREAD_LIBRARY mkl_intel_thread PATHS ${MKL_ROOT}/lib/intel64)
    
#     set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m64")
#     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m64")
#     set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -m64")

#     target_link_libraries(spllt_test iomp5)

#   else()

#     set(MKL_LIBS $ENV{MKL_LIBS})
#     set(MKL_ROOT "/opt/intel/mkl" CACHE PATH "Location of MKL Library")
#     set(MKL_DIR $ENV{MKLROOT})

#     find_library(MKL_IFACE_LIBRARY mkl_gf_lp64 PATHS ${MKL_LIBS} ${MKL_ROOT}/lib/intel64 ${MKL_DIR}/lib/intel64)
#     # find_library(MKL_THREAD_LIBRARY mkl_gnu_thread PATHS ${MKL_ROOT}/lib/intel64)
#     find_library(MKL_SEQ_LIBRARY mkl_sequential PATHS ${MKL_LIBS} ${MKL_DEFAULT_ROOT}/lib/intel64 ${MKL_DIR}/lib/intel64)
#     find_library(MKL_CORE_LIBRARY mkl_core PATHS ${MKL_LIBS} ${MKL_ROOT}/lib/intel64 ${MKL_DIR}/lib/intel64) 
#     # set(MKL_LIBRARIES ${MKL_IFACE_LIBRARY} ${MKL_THREAD_LIBRARY} ${MKL_CORE_LIBRARY})

#     MESSAGE( STATUS "MKL Root: " ${MKL_DIR} )
#     MESSAGE( STATUS "MKL MKL_IFACE_LIBRARY: " ${MKL_IFACE_LIBRARY} )

#   endif()

#   set(BLAS_LAPACK_LIBRARIES ${MKL_IFACE_LIBRARY} ${MKL_SEQ_LIBRARY} ${MKL_CORE_LIBRARY})
#   MESSAGE( STATUS "BLAS and LAPACK Libraries: " ${BLAS_LAPACK_LIBRARIES} )

# else()

#   # Reference BLAS libraries

#   find_library(BLAS_LIBRARY blas)
#   find_library(LAPACK_LIBRARY lapack)
#   set(BLAS_LAPACK_LIBRARIES ${BLAS_LIBRARY} ${LAPACK_LIBRARY})

# endif()

########################################
# BLAS
set(LBLAS "" CACHE STRING "BLAS library")

# If LBLAS not set, use environement variable
if(LBLAS)
  set(BLAS_LIBRARIES ${LBLAS})
elseif(DEFINED ENV{BLAS_LIB})
  set(BLAS_LIBRARIES $ENV{BLAS_LIB})
endif()

if(DEFINED BLAS_LIBRARIES)
  set(CMAKE_REQUIRED_LIBRARIES ${BLAS_LIBRARIES})
  CHECK_FORTRAN_FUNCTION_EXISTS("dgemm" BLAS_FOUND)
  unset(CMAKE_REQUIRED_LIBRARIES)
  if(NOT BLAS_FOUND)
    message(ERROR "User supplied BLAS is NOT working")
  endif()
else()
  find_package(BLAS)
endif()

if(BLAS_FOUND)
  set(LIBS ${LIBS} ${BLAS_LIBRARIES})
else()
  message(FATAL_ERROR "BLAS NOT found")
endif (BLAS_FOUND)

########################################
# LAPACK
set(LLAPACK "" CACHE STRING "LAPACK library")
# If LBLAS not set, use environement variable 
if(LLAPACK)
  set(LAPACK_LIBRARIES ${LLAPACK})
elseif(DEFINED ENV{LAPACK_LIB})
  set(LAPACK_LIBRARIES $ENV{LAPACK_LIB})
endif()
if(DEFINED LAPACK_LIBRARIES)
  set(CMAKE_REQUIRED_LIBRARIES ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES})
  CHECK_FORTRAN_FUNCTION_EXISTS("dpotrf" LAPACK_FOUND)
  unset(CMAKE_REQUIRED_LIBRARIES)
  if(NOT LAPACK_FOUND)
    message(ERROR "User supplied LAPACK is NOT working")
  endif()

else()
  find_package(LAPACK)
endif()

if (LAPACK_FOUND)
  set(LIBS ${LIBS} ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES})
else()
  message(FATAL_ERROR "LAPACK library NOT found")
endif (LAPACK_FOUND)

########################################
# std C++ (needed for linking with ssids)
set(LIBS ${LIBS} stdc++)

# Add sources files
add_subdirectory(src)

################################################################################
# Test drivers

########################################
# Setup list of test drivers
set(test_drivers)

if(MA87_TEST_DRIVER MATCHES ON)
  # Generate the MA87 test driver
  MESSAGE( STATUS "MA87 test driver: " ${MA87_TEST_DRIVER} )

  list(APPEND test_drivers "drivers/run_ma87.f90")

  # add_executable(spllt_test drivers/run_ma87.f90)
else()
  # add_executable(spllt_test spllt_test.F90)
  list(APPEND test_drivers "drivers/spllt_test.F90")
  
  # add_executable(spllt_test drivers/spllt_test.F90)
endif()

if(${RUNTIME} MATCHES "OMP")
  list(APPEND test_drivers "drivers/spllt_omp.F90")
endif()

foreach(test_driver ${test_drivers})
  
  get_filename_component(test_driver_name ${test_driver} NAME_WE)
  add_executable(${test_driver_name} ${test_driver})

  ########################################
  # Link test drivers with external libraries
  target_include_directories(${test_driver_name} PUBLIC ${SPRAL_DIR})
  target_include_directories(${test_driver_name} PUBLIC ${CMAKE_BINARY_DIR}/src)
  target_link_libraries(${test_driver_name} ${LIBS})

endforeach()

################################################################################
# Print summary

message("-----------------------------------------")
message("Configuration of SpLLT done.")
message(" ")
message(
  "Build type: ${CMAKE_BUILD_TYPE}\n"
  "Fortran compiler: ${CMAKE_Fortran_COMPILER} (${CMAKE_Fortran_COMPILER_ID})\n"
  "Fortran compiler flags: ${CMAKE_Fortran_FLAGS_ALL}\n"
  "C compiler:  ${CMAKE_C_COMPILER} (${CMAKE_C_COMPILER_ID})\n"
  "C compiler flags: ${CMAKE_Fortran_FLAGS_ALL}")
message("")
message("BLAS libraries: ${BLAS_LIBRARIES}")
message("LAPACK libraries: ${LAPACK_LIBRARIES}")
message("")
if(${RUNTIME} MATCHES "StarPU")
  message("Runtime system: StarPU")
  message("StarPU libraries: ${STARPU_LIBRARIES}")
elseif(${RUNTIME} MATCHES "Parsec")
  message("Runtime system: PaRSEC")
  message("Parsec libraries: ${PARSEC_LIBRARIES}")
elseif(${RUNTIME} MATCHES "OMP")
  message("Runtime system: OpenMP")
endif()
message("-----------------------------------------")
