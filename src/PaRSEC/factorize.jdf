extern "C" %{

#include "parsec.h"

#include "parsec_internal.h"
#include "parsec/private_mempool.h"
   //#include "data_dist/matrix/two_dim_rectangle_cyclic.h"
#include "data_dist/matrix/matrix.h"
#include "data_dist/matrix/two_dim_tabular.h"
#include "factorize.h"
/* #include "spllt_parsec_data.h" */

#include "spllt_parsec_blk_data.h"
#include "parsec/arena.h"

#if defined(SPLLT_USE_MPI)
#include <mpi.h>
#endif  /* defined(SPLLT_USE_MPI) */

/* #if defined(DAGUE_HAVE_MPI) */
/* #include <mpi.h> */
/* static MPI_Datatype block; */
/* #endif */

%}

blk            [type = "struct blk_desc*"]
snodes         [type = "void *"]
nnodes         [type = int]
bcs            [type = "void *"]
nbc            [type = int]
diags          [type = "long int *"]
ndiag          [type = int]
min_width_blas [type = int]
maxmn          [type = int]
val            [type = "void *"]
nval           [type = int]
keep           [type = "void *"]
p_work         [type = "parsec_memory_pool_t *" size = "(sizeof(double)*maxmn*maxmn)"]


/* init_node(snode) */

/*    snode = 1..nnodes */
/*    /\* id of first block in column *\/ */
/*    blk_sa =  %{ return get_blk_sa(snodes, snode); %} */
/*    /\* id of last block in column *\/ */
/*    blk_en =  %{ return get_blk_en(snodes, snode); %} */

/*    : blk(blk_sa) */

/*    CTL ctl -> ctl init_block(blk_sa..blk_en) */

/*    ; (nnodes - snode +1)*4 */

/* BODY */
/* { */
   
/*    /\* printf("[init_node] snode: %d, blk_sa: %ld, blk_en: %ld\n", snode, blk_sa, blk_en); *\/ */
   
/*    spllt_init_node_c(snode, val, nval, keep); */
/* } */
/* END */

init_block(id)

   id = 1..nbc

   /* current node */
   snode = %{ return get_blk_node(bcs, id); %}
   /* number of update between on current block */
   upd_count = %{ return get_upd_count(bcs, id); %}

   /* current block column*/
   bcol =   %{ return get_bcol(bcs, id); %}
   diag_idx = bcol-1
   /* id of current diag block */
   id_kk  =  %{ return diags[diag_idx]; %}

   isDiag =  %{ return is_diag(bcs, id); %}
   /* id of first block in column */
   blk_sa =  %{ return get_blk_sa(snodes, snode); %}
   /* first block column in node */
   bcol_sa =   %{ return get_bcol(bcs, blk_sa); %}
   /* index of diag block on first column within current node */
   diag_idx_sa = bcol_sa-1
   /* id of first diag block */
   id_kk_sa  = %{ return diags[diag_idx_sa]; %}
   /* column index of current block in node */
   id_jk_idx = bcol - bcol_sa
   /* row index of current block in node */
   id_ik_idx = id - id_kk

   : blk(id)

   /* CTL ctl <- ctl init_node(snode)  */

   RW bc <- blk(id)
         -> ((upd_count == 0) && (bcol == bcol_sa) &&  isDiag) ? bc_kk factorize_block(diag_idx)
         -> ((upd_count == 0) && (bcol == bcol_sa) && !isDiag) ? bc_ik solve_block(diag_idx, id)
         -> ((upd_count == 0) && (bcol != bcol_sa)) ? bc_ij update_block(diag_idx_sa, id_kk_sa+id_jk_idx, id_kk_sa+id_jk_idx+id_ik_idx)
         -> (upd_count > 0) ? bc_ij update_between(id, 1)

   /* ; (nnodes - snode +1)*4 */
   ; 5

BODY
{

   int rank;
   MPI_Comm_rank(MPI_COMM_WORLD, &rank);
   /* printf("[init_blk] blk: %d\n", id); */
   printf("[init_blk] blk: %d, rank: %d\n", id, rank);
   /* printf("[init_blk] upd_count: %d, bcol: %d\n", upd_count, bcol); */
   
   spllt_init_blk_c(id, val, nval, keep);

   /* if (id == blk_sa) { */
   /*    spllt_init_blk_c(snode, val, nval, keep); */
   /* } */
}
END

// factorize block
factorize_block(diag_idx)

   diag_idx = 0..(ndiag-1)
   /* id = 1 */
   id_kk = %{ return diags[diag_idx]; %}
   /* current node */
   snode = %{ return get_blk_node(bcs, id_kk); %}
   /* get first (diag) block id in current node */
   blk_sa =  %{ return get_blk_sa(snodes, snode); %}
   
   last_blk = %{ return get_last_blk(bcs, id_kk); %}

   /* id of prev diag block */
   prev_id_kk = %{ if (diag_idx > 0) {return diags[diag_idx-1];} else {return -1;} %}

   upd_count = %{ return get_upd_count(bcs, id_kk); %}

   /* Number of update_bet task depending on this task */
   dep_out_count = %{ return get_dep_out_count(bcs, id_kk); %}

   : blk(id_kk)

   RW bc_kk <- (id_kk == blk_sa && upd_count == 0) ? bc init_block(id_kk)
            <- (id_kk == blk_sa && upd_count > 0) ? bc_ij update_between(id_kk, upd_count) /* blk(id_kk) */
            <- (id_kk != blk_sa) ? bc_ij update_block(diag_idx-1, prev_id_kk+1, prev_id_kk+1) /* blk(id_kk) */
            -> (id_kk == last_blk) ? blk(id_kk) : bc_kk solve_block(diag_idx, (id_kk+1)..last_blk)
            -> (dep_out_count > 0) ? bc update_between_aux(id_kk, 1..dep_out_count) /* blk(id_kk) */
            /* -> blk(id_kk) */

   /* ; (nnodes - snode +1)*4 + 3 */
   ; 3

   /* RW bc_kk <- (id == blk_sa) ? blk(id) : bc_ij update_block(prev_diag, 1, id, id) */

BODY
{

   int rank;
   MPI_Comm_rank(MPI_COMM_WORLD, &rank);
   printf("[factorize_block] rank: %d\n", rank);

   /* printf("[factorize_block] bc_kk: %p\n", bc_kk); */
   /* printf("[factorize_block] id_kk: %d\n", id_kk); */

   int m = get_blk_m(bcs, id_kk);
   int n = get_blk_n(bcs, id_kk);
   
   /* printf("[factorize_block] blk id: %d, m: %d, n: %d\n", id_kk, m, n); */
   /* printf("[factorize_block] diag idx: %ld\n", diags[diag_idx]); */
   /* printf("[factorize_block] bc_kk: %p\n", bc_kk); */

   spllt_factor_diag_block_c(m, n, bc_kk);

}
END

// solve block

solve_block(diag_idx, id_ik)

   diag_idx  = 0..(ndiag-1)
   /* id of current diag block */
   id_kk =  %{ return diags[diag_idx]; %}
   /* current node */
   snode = %{ return get_blk_node(bcs, id_kk); %}
   /* id of prev diag block */
   prev_id_kk =  %{ if (diag_idx > 0) {return diags[diag_idx-1];} else {return -1;} %}
   /* id of first block in column */
   blk_sa =  %{ return get_blk_sa(snodes, snode); %}
   /* id of last block in column */
   last_blk =  %{ return get_last_blk(bcs, id_kk); %}
   /* iterator on subdiag blocks */
   id_ik = (id_kk+1)..last_blk

   /* number of block column in current node */
   ncol =   %{ return get_nc(snodes, nnodes, bcs, id_kk); %}
   /* current block column*/
   bcol =   %{ return get_bcol(bcs, id_kk); %}
   /* first block column in node */
   bcol_sa =   %{ return get_bcol(bcs, blk_sa); %}
   /* local column index */
   col = bcol - bcol_sa + 1
   /* number of block column to update */
   ncol_upd = ncol - col

   /* idx of ik and ik blocks within current column */
   id_ik_idx = id_ik - id_kk

   upd_count =  %{ return get_upd_count(bcs, id_ik); %}

   /* Number of update_bet task depending on this task */
   dep_out_count =  %{ return get_dep_out_count(bcs, id_ik); %}

   : blk(id_ik)

   READ  bc_kk <- bc_kk factorize_block(diag_idx)
   RW    bc_ik <- (id_kk == blk_sa && upd_count == 0) ? bc init_block(id_ik) /* blk(id_ik) */
               <- (id_kk == blk_sa && upd_count > 0) ? /* blk(id_ik) */ bc_ij update_between(id_ik, upd_count)
               <- (id_kk != blk_sa) ? bc_ij update_block(diag_idx-1, prev_id_kk+1, prev_id_kk+id_ik_idx+1) /* blk(id_ik) */
               -> (col == ncol) ? blk(id_ik)
               -> (col < ncol) ? bc_jk update_block(diag_idx, id_ik, (id_kk+1)..last_blk) /* blk(id_ik) */
               -> (col < ncol) ? bc_ik update_block(diag_idx, (id_kk+1)..(id_kk+ncol_upd), id_ik) /* blk(id_ik) */
               -> (dep_out_count > 0) ? bc update_between_aux(id_ik, 1..dep_out_count) /* blk(id_ik) */
               /* -> blk(id_ik) */

   /* ; (nnodes - snode +1)*4 + 2 */
   ; 2

BODY
{
   printf("[solve_block] id_kk: %d, id_ik: %d\n", id_kk, id_ik);

   int m = get_blk_m(bcs, id_ik);
   int n = get_blk_n(bcs, id_ik);

   spllt_solve_block_c(m, n, bc_kk, bc_ik);
}
END

// update block

update_block(diag_idx, id_jk, id_ik)

   diag_idx = 0..(ndiag-1)
   /* id of current diag block */
   id_kk = %{ return diags[diag_idx]; %}
   /* current node */
   snode = %{ return get_blk_node(bcs, id_kk); %}
   /* get last block id in current block column */
   last_blk =  %{ return get_last_blk(bcs, id_kk); %}
   /* get number of block column in current node */
   ncol = %{ return get_nc(snodes, nnodes, bcs, id_kk); %}
   /* get column number of diag block */
   bcol_diag = %{ return get_bcol(bcs, id_kk); %}
   /* get first (diag) block id in current node */
   blk_sa = %{ return get_blk_sa(snodes, snode); %}
   /* get column number of first block in node */
   bcol_sa = %{ return get_bcol(bcs, blk_sa); %}

   /* number of column to be updated */
   ncol_upd = ncol-(bcol_diag-bcol_sa+1)

   id_jk = (id_kk+1)..(id_kk+ncol_upd)

   id_ik = id_jk..last_blk

   id_ij = %{ return get_dest_blk_id(bcs, nbc, id_jk, id_ik); %}
   /* get column number of updated block */
   bcol = %{ return get_bcol(bcs, id_ij); %}

   id_jk_idx = id_jk - id_kk
   id_ik_idx = id_ik - id_kk
   /* id of prev diag block */
   next_id_kk = %{ if (diag_idx < ndiag) {return diags[diag_idx+1];} else {return -1;} %}
   /* id of prev diag block */
   prev_id_kk = %{ if (diag_idx > 0) {return diags[diag_idx-1];} else {return -1;} %}

   upd_count = %{ return get_upd_count(bcs, id_ij); %}

   : blk(id_ij)

   READ bc_jk <- bc_ik solve_block(diag_idx, id_jk)

   READ bc_ik <- bc_ik solve_block(diag_idx, id_ik)

   RW bc_ij <- (id_kk == blk_sa && upd_count == 0) ? bc init_block(id_ij)
            <- (id_kk == blk_sa && upd_count > 0) ? bc_ij update_between(id_ij, upd_count) /* blk(id_ij) */
            <- (id_kk != blk_sa) ? bc_ij update_block(diag_idx-1, prev_id_kk+id_jk_idx+1, prev_id_kk+id_ik_idx+1)
            -> ((bcol == bcol_diag+1) && (id_jk == id_ik)) ? bc_kk factorize_block(diag_idx+1)
            -> ((bcol == bcol_diag+1) && (id_jk != id_ik)) ? bc_ik solve_block(diag_idx+1, next_id_kk+id_ik_idx-1)
            -> (bcol > bcol_diag+1) ? bc_ij update_block(diag_idx+1, next_id_kk+id_jk_idx-1,next_id_kk+id_ik_idx-1)
   /* -> ( (bcol == bcol_diag+1) && !isDiag_ij) ?  */

   /* ; (nnodes - snode +1)*4 + 1 */
        ; 1

BODY
{
   printf("[update_block] id_kk: %d, id_jk: %d, id_ik: %d, id_ij: %d\n", id_kk, id_jk, id_ik, id_ij);

   int m = get_blk_m(bcs, id_ij);
   int n = get_blk_n(bcs, id_ij);

   int n1 = get_blk_n(bcs, id_jk);
   
   int diag = is_diag(bcs, id_ij);

   spllt_update_block_c(m, n, bc_ij, diag, n1, bc_jk, bc_ik);

}
END


// update between auxiliary function

update_between_aux(id, i)

  id = 1..nbc
  /* current node */
  snode = %{ return get_blk_node(bcs, id); %}

  dep_out_count =  %{ return get_dep_out_count(bcs, id); %}

  i = 1..dep_out_count

  isDiag =  %{ return is_diag(bcs, id); %}
  
  bcol =  %{ return get_bcol(bcs, id); %}
  diag_idx = bcol-1

  /* get information on updated block: idx, position and flow */
  p =  %{ return get_dep_out_p(bcs, id, i); %}
  id_ij =  %{ return get_dep_out_id_ij(bcs, id, i); %}
  flow =  %{ return get_dep_out_flow(bcs, id, i); %}

  : blk(id)

  RW bc <- /* blk(id) */ (isDiag) ? bc_kk factorize_block(diag_idx) : bc_ik solve_block(diag_idx, id)
        -> (flow == 1) ? bc_jk update_between(id_ij, p)
        -> (flow == 2) ? bc_ik update_between(id_ij, p)

   /* ; (nnodes - snode +1)*4 */
        ; 0
BODY
{
   /* printf("[update_between_aux] id: %d, i: %d, id_ij: %d, flow: %d, p: %d\n", id, i, id_ij, flow, p); */
}
END

// update between block

update_between(id, i)

  id = 1..nbc
  /* current node */
  snode = %{ return get_blk_node(bcs, id); %}
  /* number of update on blk id */
  upd_count =  %{ return get_upd_count(bcs, id); %}
  /* update index */
  i = 1..upd_count
  
  bcol =  %{ return get_bcol(bcs, id); %}
  diag_idx = bcol-1

  /* get first (diag) block id in current node */
  blk_sa =   %{ return get_blk_sa(snodes, snode); %}
  /* get the first block column in current node */
  bcol_sa =  %{ return get_bcol(bcs, blk_sa); %}
  diag_idx_sa = bcol_sa-1

  /* lkj */
  p1 =  %{ return get_dep_in_p1(bcs, id, i); %}
  id_jk =  %{ return get_dep_in_id_jk(bcs, id, i); %}
  
  /* lij */
  p2 =  %{ return get_dep_in_p2(bcs, id, i); %}
  id_ik =  %{ return get_dep_in_id_ik(bcs, id, i); %}

  /* flow toward update block task */

  /* id of current diag block */
  id_kk  =  %{ return diags[diag_idx]; %}

  /* id of first diag block */
  id_kk_sa  = %{ return diags[diag_idx_sa]; %}

  /* column index of current block in node */
  id_jk_idx = bcol - bcol_sa
  /* row index of current block in node */
  id_ik_idx = id - id_kk

  : blk(id)

  /* RW bc_ij <- blk(id) */
  /*          -> blk(id) */

  RW bc_ij <- (i == 1) ? bc init_block(id)
           <- (i > 1) ? bc_ij update_between(id, i-1)
           -> (i < upd_count) ? bc_ij update_between(id, i+1)
           -> (i == upd_count && bcol == bcol_sa && id == blk_sa) ? bc_kk factorize_block(diag_idx)
           -> (i == upd_count && bcol == bcol_sa && id != blk_sa) ? bc_ik solve_block(diag_idx, id)
           -> (i == upd_count && bcol != bcol_sa) ? bc_ij update_block(diag_idx_sa, id_kk_sa+id_jk_idx, id_kk_sa+id_jk_idx+id_ik_idx)

  READ bc_jk <- bc update_between_aux(id_jk, p1)

  READ bc_ik <- bc update_between_aux(id_ik, p2)

  /* ; (nnodes - snode +1)*4 */
  ; 0

BODY
{

#if defined(SPLLT_USE_MPI)

   int src_node = get_blk_node(bcs, id_jk);
   int dest_node = get_blk_node(bcs, id);

   int m = get_blk_m(bcs, id);
   int n = get_blk_n(bcs, id);

   int n1 = get_blk_n(bcs, id_jk);

   int dcol = bcol-bcol_sa+1;

   int sbcol = get_bcol(bcs, id_jk);
   int sblk_sa = get_blk_sa(snodes, src_node);
   int sbcol_sa = get_bcol(bcs, sblk_sa);
   int scol = sbcol - sbcol_sa + 1;
   
   void *snode = get_node(snodes, src_node);
   void *dnode = get_node(snodes, dest_node);

   void *blk_ij = get_blk(bcs, id);
   void *blk_jk = get_blk(bcs, id_jk);
   void *blk_ik = get_blk(bcs, id_ik);

   /*    double *src1 = (double *)bc_jk; */
   /*    double *src2 = (double *)bc_ik; */
   /*    double *dest = (double *)bc_ij; */

   int csrc = get_dep_in_csrc(bcs, id, i);
   int rsrc = get_dep_in_rsrc(bcs, id, i);
 
   /* printf("csrc: %d, rsrc: %d\n", csrc, rsrc);  */

   void *buffer = parsec_private_memory_pop( p_work );
      
   /* if (!sync) { */
   spllt_update_between_block_c(m, n, bc_ij, n1, bc_jk, bc_ik, dcol, scol,
                                blk_ij, dnode, blk_jk, blk_ik, snode,
                                min_width_blas, buffer);
   /* } */

   parsec_private_memory_push( p_work, buffer );

#else
   // in a shared memory environement it is possible to exploit the
   // fact that block columns are contiguous in memory

   int sync = get_dep_in_sync(bcs, id, i);

   /* printf("[update_between] id_ij: %d, id_jk: %d, id_ik: %d, sync: %d\n", id, id_jk, id_ik, sync);    */
   /* printf("[update_between] bcol: %d, bcol_sa: %d\n", bcol, bcol_sa);    */

   
   /* printf("[update_between] bc_ij: %p, bc_jk: %p, bc_ik: %p\n", bc_ij, bc_jk, bc_ik);    */
   /* printf("[update_between] diag_idx: %d\n", diag_idx);    */

   /* printf("[update_between] id: %d, i: %d, upd_count: %d\n", id, i, upd_count);    */
   /* printf("[update_between] id_jk: %d, p1: %d\n", id_jk, p1);    */
   /* printf("[update_between] id_ik: %d, p2: %d\n", id_ik, p2);    */

   if (!sync) {
      
      int m = get_blk_m(bcs, id);
      int n = get_blk_n(bcs, id);

      int dcol = bcol-bcol_sa+1;

      int src_node = get_blk_node(bcs, id_jk);
      int dest_node = get_blk_node(bcs, id);

      void *p_snode = get_node(snodes, src_node);
      void *p_dnode = get_node(snodes, dest_node);

      int sbcol = get_bcol(bcs, id_jk);
      int sblk_sa = get_blk_sa(snodes, src_node);
      int sbcol_sa = get_bcol(bcs, sblk_sa);
      int scol = sbcol - sbcol_sa + 1;

      void *blk_ij = get_blk(bcs, id);

      int n1 = get_blk_n(bcs, id_jk);

      double *src1 = (double *)bc_jk;
      double *src2 = (double *)bc_ik;
      double *dest = (double *)bc_ij;
   
      int csrc = get_dep_in_csrc(bcs, id, i);
      int rsrc = get_dep_in_rsrc(bcs, id, i);

      void *buffer = parsec_private_memory_pop( p_work );

      void *blk_jk = get_blk(bcs, id_jk);
      void *blk_ik = get_blk(bcs, id_ik);

      spllt_update_between_c(m, n, blk_ij,
                             dcol, p_dnode,
                             n1,
                             scol, p_snode,
                             dest,
                             src1 + csrc-1, src2 + rsrc-1,
                             /* bc_ij, bc_jk, bc_ik, */
                             buffer, min_width_blas);

      parsec_private_memory_push( p_work, buffer );

   }
#endif


}
END

extern "C" %{
   
   parsec_handle_t* spllt_parsec_factorize(blk_desc_t *blk_desc, void *snodes, int nnodes, 
                                          void *bcs, int nbc,
                                          long int *diags, int ndiag,
                                          int min_width_blas, int maxmn,
                                          void *val, int nval, void *keep) {

      parsec_factorize_handle_t* fac_hdl;


      /* printf("[factorize] number of blocks: %d\n", nbc); */
      /* printf("[factorize] number of diag blocks / block columns: %d\n", ndiag); */
      /* printf("[factorize] nnodes: %d\n", nnodes); */
            
      fac_hdl = parsec_factorize_new(blk_desc,
                                     snodes, nnodes,
                                     bcs, nbc,
                                     diags, ndiag,
                                     min_width_blas, maxmn,
                                     val, nval, keep,
                                     NULL);

      assert( NULL != fac_hdl );

      fac_hdl->_g_p_work = ( parsec_memory_pool_t* ) malloc(sizeof(parsec_memory_pool_t));
      parsec_private_memory_init( fac_hdl->_g_p_work, maxmn * maxmn * sizeof(double) );
      /* printf("[factorize] maxmn: %d\n", maxmn); */
      parsec_matrix_add2arena( fac_hdl->arenas[PARSEC_factorize_DEFAULT_ARENA], parsec_datatype_double_t,
                               matrix_UpperLower, 1,
                               maxmn, maxmn, maxmn,
                               PARSEC_ARENA_ALIGNMENT_SSE, -1 );
      
      return &fac_hdl->super;    
   }

   void spllt_parsec_factorize_finalize( parsec_handle_t *handle ) {
      
      parsec_factorize_handle_t *fac_hdl = (parsec_factorize_handle_t *) handle;

      printf("[factorize] finalize\n");
      
      parsec_private_memory_fini(fac_hdl->_g_p_work);
      free(fac_hdl->_g_p_work);

      parsec_handle_free(handle);
   }
%}
