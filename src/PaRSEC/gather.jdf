extern "C" %{

#include "parsec.h"

#include "parsec_internal.h"
#include "parsec/private_mempool.h"
   //#include "data_dist/matrix/two_dim_rectangle_cyclic.h"
#include "data_dist/matrix/matrix.h"
#include "data_dist/matrix/two_dim_tabular.h"
#include "gather.h"

#include "spllt_data.h"
#include "spllt_parsec_blk_data.h"
#include "parsec/arena.h"

#if defined(SPLLT_USE_MPI)
#include <mpi.h>
#endif  /* defined(SPLLT_USE_MPI) */

/* #if defined(DAGUE_HAVE_MPI) */
/* #include <mpi.h> */
/* static MPI_Datatype block; */
/* #endif */

%}

blk             [type = "struct blk_desc*"]
base            [type = "struct base_desc*"]
nbc             [type = int]

aux(id)

   id = 1..nbc

   : blk(id)

   RW bc <- blk(id)
         -> bc gather_block(id)
BODY
{
   int rank;
   MPI_Comm_rank(MPI_COMM_WORLD, &rank);

   printf("aux, id: %d, rank: %d\n", id, rank);
}
END



gather_block(id)

   id = 1..nbc

   : base(id)

   RW bc <- bc aux(id)
         -> base(id)
BODY
{
   int rank;
   MPI_Comm_rank(MPI_COMM_WORLD, &rank);

   printf("gather_block, id: %d, rank: %d\n", id, rank);
}
END

extern "C" %{

   parsec_handle_t* gather(blk_desc_t *blk_desc, base_desc_t *base_desc, 
                           int nbc, int maxmn) {

      parsec_gather_handle_t* gat_hdl;

      printf("[gather] nbc: %d, maxmn: %d\n", nbc, maxmn);
      
      gat_hdl = parsec_gather_new(blk_desc, base_desc, nbc);

      assert(NULL != gat_hdl);
      
      parsec_matrix_add2arena(gat_hdl->arenas[PARSEC_gather_DEFAULT_ARENA], 
                              parsec_datatype_double_t,
                              matrix_UpperLower, 1,
                              maxmn, maxmn, maxmn,
                              PARSEC_ARENA_ALIGNMENT_SSE, -1);

      return &gat_hdl->super;
   }
%}

