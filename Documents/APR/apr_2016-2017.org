* Summary

  Conduct research and develop software in the area of numerical linear
  algebra. I am working full-time in the context of NLAFET (Numerical
  Linear Algebra for Future Extreme-scale Systems) which is a H2020
  project funded by the EU. Our main objective in this project is to
  develop algorithms and software capable of exploiting machine
  capabilities at extreme scale. This work is done in collaboration with
  several research laboratories and our group mainly focuses on the
  solution of sparse linear systems using direct methods.

* Performance Against Objectives

  + Settle in to life in the UK

    + Harshly done

  + Development and experiments on a sparse Cholesky code using an STF
    (Sequential Task Flow) programming model.

  + Implementation of a parallel version of SpLLT (STF-based) using
    the StarPU runtime system. Experiments on a 28 core shared-memory
    architecture and comparison with numerical testing experiments
    results obtained with the MA87 solver from the HSL library.

    + We are satified with the results we obtained compared to MA87
      but there is still a lots of room for improvment in our code.

  + Implementation of a parallel version of spLLT (STF-based) using
    the OpenMP standard (using task constructs available in the OpenMP
    4.0 standard) with both Gnu and Intel Compiler. Compare this new
    version with the StarPU version and the original code MA87.

  + Perform an experimental study of spLLT (StarPU and OpenMP version)
    on various shared-memory platforms.

  + Using the PaRSEC runtime system, move to a PTG (Parametrized Task
    Graph) programming model for the implementation of a parallel
    version of spLLT and compare it against the STF model in terms of
    performance and scalability.

  + Port the StarPU-spLLT code on GPU architectures using as much as
    possible the GPU kernels available in SSIDS (or MAGMA) and the
    scheduling strategies developed in the context of the qr_mumps
    solver. 

  + Experiments the SpLLT solver (OpenMP and StarPU) on Xeon Phi
    (Knights Landing).

  + Explore tree pruning strategies for reducing the runtime overhead,
    scheduling overhead, and use more efficient kernels for the
    factorization of sutrees using for example batched
    kernels. Similarly, test several amalgamation parameters (e.g vary
    "NEMIN") to see the impact of the tree on the DAG generation and
    execution.

  + Do a multifrontal variant of the current algorithm which is
    based on a supernodal method. Study the potential benefit of an
    hybrid multifrontal-supernodal approach.

  + From the shared-memory version of spLLT, implement a distributed
    memory version of the code using PaRSEC and StarPU (Following Marc
    Sergent's, a PhD student from INRIA Bordeaux, approach)

  + Once the Cholesky code has been studied, implement pivoting
    strategy to solve symmetric undefinite systems. This work should
    be related to the pivoting strategies developed by Jonathan.

  + Extend the work to a LU factorization in order to solve
    unsymmetric systems.

  + Try to get the ABCD solver (Duff, Ruiz and Zenadi solver based on a
    block Cimmino method) running on scarf.

* Skills and knowledge

  My research interest lie in the area of numerical linear algebra and
  high performance computing. During my PhD, I worked on the
  development of sparse direct solvers capable of exploiting the
  capabilities of the emerging heterogeneous architectures such as
  multicore architectures equipped with GPUs.
* Joint Assessment
  
  During these first three month, I implemented a Cholesky solver
  (SpLLT) based on a Sequential Task Flow (STF) programming model and
  using the compute kernels from the HSL_MA87 solver. I implemented a
  parallel version of SpLLT using the StarPU runtime system and
  experimented it on a shared-memory machine (a 28 core machine from
  the Scarf platform) to assess the performance of this code compared
  to a state-of-the-art solver. The new solver provide a basis for our
  future work including comparing several runtime systems for the
  implementation of a sparse Cholesky factorization, port this solver
  on GPU architecture and develop a distributed memory version of
  SpLLT.

  During this period, I successfully completed the mandatory training
  courses: fire safety course and safe manual handling.
