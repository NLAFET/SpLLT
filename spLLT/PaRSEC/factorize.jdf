extern "C" %{

#include "dague.h"

#include "dague_internal.h"
   //#include "data_dist/matrix/two_dim_rectangle_cyclic.h"
#include "data_dist/matrix/matrix.h"
#include "data_dist/matrix/two_dim_tabular.h"
#include "factorize.h"
/* #include "spllt_parsec_data.h" */

#include "spllt_parsec_blk_data.h"

%}

blk            [type = "struct blk_desc*"]
nbc            [type = int]

init_blk(id)

   id = 1..nbc

   : blk(id)
   
BODY
{
   /* printf("[init_blk] blk: %d\n", id); */
}
END

extern "C" %{
   
   dague_handle_t* spllt_parsec_factorize(void *bcs, int nbc) {

      dague_factorize_handle_t* fac_hdl;

      int nodes = 1;
      int rank  = 0;

#ifdef HAVE_MPI
      {
         int provided;
         MPI_Init_thread(NULL, NULL, MPI_THREAD_SERIALIZED, &provided);
      }
      MPI_Comm_size(MPI_COMM_WORLD, &nodes);
      MPI_Comm_rank(MPI_COMM_WORLD, &rank);
#endif
      
      printf("[factorize] nodes: %d, rank: %d\n", nodes, rank);
      
      blk_desc_t *blk_desc = malloc(sizeof(blk_desc_t));
      
      spllt_parsec_blk_data_init(blk_desc, 
                                 bcs, nbc,
                                 sizeof(double),
                                 nodes, rank);
      
      fac_hdl = dague_factorize_new(blk_desc, nbc);

      assert( NULL != fac_hdl );

      return &fac_hdl->super;    
   }
%}
